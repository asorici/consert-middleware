// file: CMMAgentLangOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package org.aimas.ami.cmm.agent.onto;

import jade.content.onto.BasicOntology;
import jade.content.onto.Ontology;
import jade.content.schema.AgentActionSchema;
import jade.content.schema.ConceptSchema;
import jade.content.schema.ObjectSchema;
import jade.content.schema.PredicateSchema;
import jade.content.schema.TermSchema;

/** file: CMMAgentLangOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2014/07/31, 13:46:14
 */
public class CMMAgentLangOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 5438106203733924709L;

  //NAME
  public static final String ONTOLOGY_NAME = "CMMAgentLang";
  // The singleton instance of this ontology
  private static Ontology theInstance = new CMMAgentLangOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String USERQUERY_REPEATINTERVAL="repeatInterval";
    public static final String USERQUERY_DOMAIN_UPPER_BOUND="domain_upper_bound";
    public static final String USERQUERY_QUERYCONTENT="queryContent";
    public static final String USERQUERY_QUERYTARGET="queryTarget";
    public static final String USERQUERY_DOMAIN_LOWER_BOUND="domain_lower_bound";
    public static final String USERQUERY="UserQuery";
    public static final String DOMAINDETECTED_DOMAIN="domain";
    public static final String DOMAINDETECTED="DomainDetected";
    public static final String SENSORPRESENT_AGENT="agent";
    public static final String SENSORPRESENT="SensorPresent";
    public static final String ASSERTIONUPDATED_ASSERTIONCONTENT="assertionContent";
    public static final String ASSERTIONUPDATED_ASSERTION="assertion";
    public static final String ASSERTIONUPDATED="AssertionUpdated";
    public static final String QUERYHANDLERPRESENT_AGENT="agent";
    public static final String QUERYHANDLERPRESENT_ISPRIMARY="isPrimary";
    public static final String QUERYHANDLERPRESENT="QueryHandlerPresent";
    public static final String ASSERTIONDISTRIBUTION_ASSIGNMENT="assignment";
    public static final String ASSERTIONDISTRIBUTION="AssertionDistribution";
    
    public static final String DOMAINDESCRIPTION_QUERYHANDLER="queryHandler";
    public static final String DOMAINDESCRIPTION_COORDINATOR="coordinator";
    public static final String DOMAINDESCRIPTION_DOMAIN="domain";
    public static final String DOMAINDESCRIPTION="DomainDescription";
    
    public static final String ENABLEASSERTIONS_ENABLEDCAPABILITY="enabledCapability";
    public static final String ENABLEASSERTIONS="EnableAssertions";
    public static final String STOPSENDING="StopSending";
    public static final String EXECTASK_ASSERTION="assertion";
    public static final String EXECTASK="ExecTask";
    public static final String REGISTERQUERYREQUESTER_QUERYREQUESTER="queryRequester";
    public static final String REGISTERQUERYREQUESTER="RegisterQueryRequester";
    public static final String SETUPDATEMODE_UPDATERATE="updateRate";
    public static final String SETUPDATEMODE_UPDATEMODE="updateMode";
    public static final String SETUPDATEMODE="SetUpdateMode";
    public static final String INFORMDOMAIN_APPIDENTIFIER="appIdentifier";
    public static final String INFORMDOMAIN="InformDomain";
    public static final String APPLYCONFIGURATION_CONFIGCONTENT="configContent";
    public static final String APPLYCONFIGURATION="ApplyConfiguration";
    public static final String STARTSENDING="StartSending";
    public static final String INFORMASSERTIONS="InformAssertions";
    public static final String COLLECTQUERYBASE="CollectQueryBase";
    public static final String CONNECTTODOMAIN_DOMAIN="domain";
    public static final String CONNECTTODOMAIN="ConnectToDomain";
    public static final String PUBLISHASSERTIONS_CAPABILITY="capability";
    public static final String PUBLISHASSERTIONS="PublishAssertions";
    public static final String ASSERTIONCAPABILITY_AVAILABLEUPDATEMODE="availableUpdateMode";
    public static final String ASSERTIONCAPABILITY_ASSERTION="assertion";
    public static final String ASSERTIONCAPABILITY_AVAILABLEUPDATERATE="availableUpdateRate";
    public static final String ASSERTIONCAPABILITY="AssertionCapability";
    public static final String CONTEXTDOMAIN_DOMAINDIMENSION="domainDimension";
    public static final String CONTEXTDOMAIN_DOMAINENTITY="domainEntity";
    public static final String CONTEXTDOMAIN_DOMAINVALUE="domainValue";
    public static final String CONTEXTDOMAIN="ContextDomain";
    public static final String ASSERTIONDESCRIPTION_ANNOTATIONTYPE="annotationType";
    public static final String ASSERTIONDESCRIPTION_ASSERTIONTYPE="assertionType";
    public static final String ASSERTIONDESCRIPTION="AssertionDescription";
    public static final String ASSERTIONASSIGNMENT_CAPABILITY="capability";
    public static final String ASSERTIONASSIGNMENT_COORDINATOR="coordinator";
    public static final String ASSERTIONASSIGNMENT="AssertionAssignment";
    
    public static final String QUERYRESULT_ASKRESULT="askResult";
    public static final String QUERYRESULT_QUERYRESULTSET="queryResultSet";
    public static final String QUERYRESULT_ERRORMESSAGE="errorMessage";
    public static final String QUERYRESULT_ISASK="isAsk";
    public static final String QUERYRESULT="QueryResult";
    
    public static final String REGISTERCMMAGENT_AGENTTYPE="agentType";
    public static final String REGISTERCMMAGENT_AGENTACTIVE="agentActive";
    public static final String REGISTERCMMAGENT_APPIDENTIFIER="appIdentifier";
    public static final String REGISTERCMMAGENT="RegisterCMMAgent";
    
    public static final String DEREGISTERCMMAGENT_AGENTTYPE="agentType";
    public static final String DEREGISTERCMMAGENT_APPIDENTIFIER="appIdentifier";
    public static final String DEREGISTERCMMAGENT="DeregisterCMMAgent";
    
    public static final String SEARCHCOORDINATORAGENT="SearchCoordinatorAgent";
    public static final String SEARCHQUERYHANDLERAGENT="SearchQueryHandlerAgent";
    
    public static final String FOUNDCOORDINATORAGENT_AGENT="agent";
    public static final String FOUNDCOORDINATORAGENT="FoundCoordinatorAgent";
    public static final String FOUNDQUERYHANDLERAGENT_AGENT="agent";
    public static final String FOUNDQUERYHANDLERAGENT="FoundQueryHandlerAgent";
    
    public static final String UPDATEENTITYDESCRIPTIONS_ENTITYCONTENTS="entityContents";
    public static final String UPDATEENTITYDESCRIPTIONS="UpdateEntityDescriptions";
    
    public static final String UPDATEPROFILEDASSERTION_ASSERTIONCONTENT="assertionContent";
    public static final String UPDATEPROFILEDASSERTION_ASSERTION="assertion";
    public static final String UPDATEPROFILEDASSERTION="UpdateProfiledAssertion";
    
    public static final String REGISTERMANAGER_AGENT="agent";
    public static final String REGISTERMANAGER_QUERYHANDLER="queryHandler";
    public static final String REGISTERMANAGER_DOMAINVALUE="domainValue";
    public static final String REGISTERMANAGER_DOMAINENTITY="domainEntity";
    public static final String REGISTERMANAGER_RELATIONTYPE="relationType";
    public static final String REGISTERMANAGER="RegisterManager";
    
    public static final String QUERYBASE_BASEITEMS="baseItems";
    public static final String QUERYBASE="QueryBase";
    
    public static final String QUERYBASEITEM_QUERYUPPERBOUND="queryUpperBound";
    public static final String QUERYBASEITEM_QUERYLOWERBOUND="queryLowerBound";
    public static final String QUERYBASEITEM_QUERYHANDLER="queryHandler";
    public static final String QUERYBASEITEM="QueryBaseItem";
  
    public static final String RESOLVEQUERYBASE_QUERY="query";
    public static final String RESOLVEQUERYBASE_RECEIVEDFROMAGENT="receivedFromAgent";
    public static final String RESOLVEQUERYBASE="ResolveQueryBase";
    
   /**
   * Constructor
  */
  private CMMAgentLangOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema assertionAssignmentSchema = new ConceptSchema(ASSERTIONASSIGNMENT);
    add(assertionAssignmentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultAssertionAssignment.class);
    ConceptSchema assertionDescriptionSchema = new ConceptSchema(ASSERTIONDESCRIPTION);
    add(assertionDescriptionSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultAssertionDescription.class);
    ConceptSchema contextDomainSchema = new ConceptSchema(CONTEXTDOMAIN);
    add(contextDomainSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultContextDomain.class);
    ConceptSchema assertionCapabilitySchema = new ConceptSchema(ASSERTIONCAPABILITY);
    add(assertionCapabilitySchema, org.aimas.ami.cmm.agent.onto.impl.DefaultAssertionCapability.class);
    ConceptSchema queryBaseItemSchema = new ConceptSchema(QUERYBASEITEM);
    add(queryBaseItemSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultQueryBaseItem.class);

    // adding AgentAction(s)
    AgentActionSchema publishAssertionsSchema = new AgentActionSchema(PUBLISHASSERTIONS);
    add(publishAssertionsSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultPublishAssertions.class);
    AgentActionSchema connectToDomainSchema = new AgentActionSchema(CONNECTTODOMAIN);
    add(connectToDomainSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultConnectToDomain.class);
    AgentActionSchema collectQueryBaseSchema = new AgentActionSchema(COLLECTQUERYBASE);
    add(collectQueryBaseSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultCollectQueryBase.class);
    AgentActionSchema informAssertionsSchema = new AgentActionSchema(INFORMASSERTIONS);
    add(informAssertionsSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultInformAssertions.class);
    AgentActionSchema startSendingSchema = new AgentActionSchema(STARTSENDING);
    add(startSendingSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultStartSending.class);
    AgentActionSchema applyConfigurationSchema = new AgentActionSchema(APPLYCONFIGURATION);
    add(applyConfigurationSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultApplyConfiguration.class);
    AgentActionSchema informDomainSchema = new AgentActionSchema(INFORMDOMAIN);
    add(informDomainSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultInformDomain.class);
    AgentActionSchema setUpdateModeSchema = new AgentActionSchema(SETUPDATEMODE);
    add(setUpdateModeSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultSetUpdateMode.class);
    AgentActionSchema registerUserSchema = new AgentActionSchema(REGISTERQUERYREQUESTER);
    add(registerUserSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultRegisterQueryRequester.class);
    AgentActionSchema execTaskSchema = new AgentActionSchema(EXECTASK);
    add(execTaskSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultExecTask.class);
    AgentActionSchema resolveQueryBaseSchema = new AgentActionSchema(RESOLVEQUERYBASE);
    add(resolveQueryBaseSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultResolveQueryBase.class);
    AgentActionSchema stopSendingSchema = new AgentActionSchema(STOPSENDING);
    add(stopSendingSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultStopSending.class);
    AgentActionSchema enableAssertionsSchema = new AgentActionSchema(ENABLEASSERTIONS);
    add(enableAssertionsSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultEnableAssertions.class);
    
    AgentActionSchema registerCMMAgentSchema = new AgentActionSchema(REGISTERCMMAGENT);
    add(registerCMMAgentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultRegisterCMMAgent.class);
    AgentActionSchema deregisterCMMAgentSchema = new AgentActionSchema(DEREGISTERCMMAGENT);
    add(deregisterCMMAgentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultDeregisterCMMAgent.class);
    
    AgentActionSchema searchCoordinatorAgentSchema = new AgentActionSchema(SEARCHCOORDINATORAGENT);
    add(searchCoordinatorAgentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultSearchCoordinatorAgent.class);

    AgentActionSchema searchQueryHandlerAgentSchema = new AgentActionSchema(SEARCHQUERYHANDLERAGENT);
    add(searchQueryHandlerAgentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultSearchQueryHandlerAgent.class);    
    
    AgentActionSchema updateEntityDescriptionsSchema = new AgentActionSchema(UPDATEENTITYDESCRIPTIONS);
    add(updateEntityDescriptionsSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultUpdateEntityDescriptions.class);
    
    AgentActionSchema updateProfiledAssertionSchema = new AgentActionSchema(UPDATEPROFILEDASSERTION);
    add(updateProfiledAssertionSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultUpdateProfiledAssertion.class);
    
    AgentActionSchema registerManagerSchema = new AgentActionSchema(REGISTERMANAGER);
    add(registerManagerSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultRegisterManager.class);
    
    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema domainDescriptionSchema = new PredicateSchema(DOMAINDESCRIPTION);
    add(domainDescriptionSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultDomainDescription.class);
    PredicateSchema queryBaseSchema = new PredicateSchema(QUERYBASE);
    add(queryBaseSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultQueryBase.class);
    PredicateSchema assertionDistributionSchema = new PredicateSchema(ASSERTIONDISTRIBUTION);
    add(assertionDistributionSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultAssertionDistribution.class);
    PredicateSchema queryHandlerPresentSchema = new PredicateSchema(QUERYHANDLERPRESENT);
    add(queryHandlerPresentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultQueryHandlerPresent.class);
    PredicateSchema assertionUpdatedSchema = new PredicateSchema(ASSERTIONUPDATED);
    add(assertionUpdatedSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultAssertionUpdated.class);
    PredicateSchema sensorPresentSchema = new PredicateSchema(SENSORPRESENT);
    add(sensorPresentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultSensorPresent.class);
    PredicateSchema domainDetectedSchema = new PredicateSchema(DOMAINDETECTED);
    add(domainDetectedSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultDomainDetected.class);
    PredicateSchema userQuerySchema = new PredicateSchema(USERQUERY);
    add(userQuerySchema, org.aimas.ami.cmm.agent.onto.impl.DefaultUserQuery.class);
    PredicateSchema queryResultSchema = new PredicateSchema(QUERYRESULT);
    add(queryResultSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultUserQueryResult.class);
    PredicateSchema foundCoordinatorAgentSchema = new PredicateSchema(FOUNDCOORDINATORAGENT);
    add(foundCoordinatorAgentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultFoundCoordinatorAgent.class);
    PredicateSchema foundQueryHandlerAgentSchema = new PredicateSchema(FOUNDQUERYHANDLERAGENT);
    add(foundQueryHandlerAgentSchema, org.aimas.ami.cmm.agent.onto.impl.DefaultFoundQueryHandlerAgent.class);
    
    
    // adding fields
    assertionAssignmentSchema.add(ASSERTIONASSIGNMENT_COORDINATOR, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    assertionAssignmentSchema.add(ASSERTIONASSIGNMENT_CAPABILITY, assertionCapabilitySchema, 1, ObjectSchema.UNLIMITED);
    assertionDescriptionSchema.add(ASSERTIONDESCRIPTION_ASSERTIONTYPE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    assertionDescriptionSchema.add(ASSERTIONDESCRIPTION_ANNOTATIONTYPE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    contextDomainSchema.add(CONTEXTDOMAIN_DOMAINVALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    contextDomainSchema.add(CONTEXTDOMAIN_DOMAINENTITY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    contextDomainSchema.add(CONTEXTDOMAIN_DOMAINDIMENSION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    assertionCapabilitySchema.add(ASSERTIONCAPABILITY_AVAILABLEUPDATERATE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    assertionCapabilitySchema.add(ASSERTIONCAPABILITY_ASSERTION, assertionDescriptionSchema, ObjectSchema.MANDATORY);
    assertionCapabilitySchema.add(ASSERTIONCAPABILITY_AVAILABLEUPDATEMODE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    publishAssertionsSchema.add(PUBLISHASSERTIONS_CAPABILITY, assertionCapabilitySchema, 1, ObjectSchema.UNLIMITED);
    connectToDomainSchema.add(CONNECTTODOMAIN_DOMAIN, contextDomainSchema, ObjectSchema.MANDATORY);
    applyConfigurationSchema.add(APPLYCONFIGURATION_CONFIGCONTENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    informDomainSchema.add(INFORMDOMAIN_APPIDENTIFIER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    setUpdateModeSchema.add(SETUPDATEMODE_UPDATEMODE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    setUpdateModeSchema.add(SETUPDATEMODE_UPDATERATE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    registerUserSchema.add(REGISTERQUERYREQUESTER_QUERYREQUESTER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    execTaskSchema.add(EXECTASK_ASSERTION, assertionDescriptionSchema, ObjectSchema.MANDATORY);
    
    resolveQueryBaseSchema.add(RESOLVEQUERYBASE_RECEIVEDFROMAGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    resolveQueryBaseSchema.add(RESOLVEQUERYBASE_QUERY, userQuerySchema, ObjectSchema.MANDATORY);
    
    enableAssertionsSchema.add(ENABLEASSERTIONS_ENABLEDCAPABILITY, assertionCapabilitySchema, 0, ObjectSchema.UNLIMITED);
    
    domainDescriptionSchema.add(DOMAINDESCRIPTION_DOMAIN, contextDomainSchema, ObjectSchema.MANDATORY);
    domainDescriptionSchema.add(DOMAINDESCRIPTION_COORDINATOR, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    domainDescriptionSchema.add(DOMAINDESCRIPTION_QUERYHANDLER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    
    queryBaseSchema.add(QUERYBASE_BASEITEMS, queryBaseItemSchema, 0, ObjectSchema.UNLIMITED);
    
    assertionDistributionSchema.add(ASSERTIONDISTRIBUTION_ASSIGNMENT, assertionAssignmentSchema, 1, ObjectSchema.UNLIMITED);
    queryHandlerPresentSchema.add(QUERYHANDLERPRESENT_ISPRIMARY, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.MANDATORY);
    queryHandlerPresentSchema.add(QUERYHANDLERPRESENT_AGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    assertionUpdatedSchema.add(ASSERTIONUPDATED_ASSERTION, assertionDescriptionSchema, ObjectSchema.MANDATORY);
    assertionUpdatedSchema.add(ASSERTIONUPDATED_ASSERTIONCONTENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    sensorPresentSchema.add(SENSORPRESENT_AGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    domainDetectedSchema.add(DOMAINDETECTED_DOMAIN, contextDomainSchema, ObjectSchema.MANDATORY);
    userQuerySchema.add(USERQUERY_QUERYTARGET, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    userQuerySchema.add(USERQUERY_QUERYCONTENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    userQuerySchema.add(USERQUERY_REPEATINTERVAL, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    userQuerySchema.add(USERQUERY_DOMAIN_UPPER_BOUND, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    userQuerySchema.add(USERQUERY_DOMAIN_LOWER_BOUND, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    queryResultSchema.add(QUERYRESULT_ISASK, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.MANDATORY);
    queryResultSchema.add(QUERYRESULT_ERRORMESSAGE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    queryResultSchema.add(QUERYRESULT_QUERYRESULTSET, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    queryResultSchema.add(QUERYRESULT_ASKRESULT, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.MANDATORY);
    
    registerCMMAgentSchema.add(REGISTERCMMAGENT_APPIDENTIFIER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    registerCMMAgentSchema.add(REGISTERCMMAGENT_AGENTACTIVE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.MANDATORY);
    registerCMMAgentSchema.add(REGISTERCMMAGENT_AGENTTYPE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    
    deregisterCMMAgentSchema.add(DEREGISTERCMMAGENT_APPIDENTIFIER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    deregisterCMMAgentSchema.add(DEREGISTERCMMAGENT_AGENTTYPE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    
    foundCoordinatorAgentSchema.add(FOUNDCOORDINATORAGENT_AGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    foundQueryHandlerAgentSchema.add(FOUNDQUERYHANDLERAGENT_AGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    
    updateEntityDescriptionsSchema.add(UPDATEENTITYDESCRIPTIONS_ENTITYCONTENTS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    updateProfiledAssertionSchema.add(UPDATEPROFILEDASSERTION_ASSERTION, assertionDescriptionSchema, ObjectSchema.MANDATORY);
    updateProfiledAssertionSchema.add(UPDATEPROFILEDASSERTION_ASSERTIONCONTENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    
    registerManagerSchema.add(REGISTERMANAGER_AGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    registerManagerSchema.add(REGISTERMANAGER_DOMAINENTITY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    registerManagerSchema.add(REGISTERMANAGER_DOMAINVALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    registerManagerSchema.add(REGISTERMANAGER_RELATIONTYPE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    registerManagerSchema.add(REGISTERMANAGER_QUERYHANDLER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
        
    queryBaseItemSchema.add(QUERYBASEITEM_QUERYHANDLER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    queryBaseItemSchema.add(QUERYBASEITEM_QUERYUPPERBOUND, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    queryBaseItemSchema.add(QUERYBASEITEM_QUERYLOWERBOUND, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    
    // adding name mappings

    // adding inheritance
    startSendingSchema.addSuperSchema(execTaskSchema);
    setUpdateModeSchema.addSuperSchema(execTaskSchema);
    stopSendingSchema.addSuperSchema(execTaskSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
