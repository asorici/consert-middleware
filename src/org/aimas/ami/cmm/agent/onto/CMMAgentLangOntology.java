// file: CMMAgentLangOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package org.aimas.ami.cmm.agent.onto;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: CMMAgentLangOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2014/07/14, 15:42:54
 */
public class CMMAgentLangOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 6722885266148375100L;

  //NAME
  public static final String ONTOLOGY_NAME = "CMMAgentLang";
  // The singleton instance of this ontology
  private static Ontology theInstance = new CMMAgentLangOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String ISPRESENT_AGENT="agent";
    public static final String ISPRESENT="IsPresent";
    public static final String ACTIVATEASSERTION_ASSERTION="assertion";
    public static final String ACTIVATEASSERTION="ActivateAssertion";
    public static final String STOPSENDING="StopSending";
    public static final String RESOLVEQUERYBASE_FORQUERY="forQuery";
    public static final String RESOLVEQUERYBASE="ResolveQueryBase";
    public static final String EXECTASK_ASSERTION="assertion";
    public static final String EXECTASK="ExecTask";
    public static final String REGISTERUSER_USER="user";
    public static final String REGISTERUSER="RegisterUser";
    public static final String SETUPDATEMODE_UPDATERATE="updateRate";
    public static final String SETUPDATEMODE_UPDATEMODE="updateMode";
    public static final String SETUPDATEMODE="SetUpdateMode";
    public static final String APPLYCONFIGURATION_CONFIGCONTENT="configContent";
    public static final String APPLYCONFIGURATION="ApplyConfiguration";
    public static final String STARTSENDING="StartSending";
    public static final String INFORMASSERTIONS="InformAssertions";
    public static final String COLLECTQUERYBASE="CollectQueryBase";
    public static final String CONNECTTODOMAIN_DOMAIN="domain";
    public static final String CONNECTTODOMAIN="ConnectToDomain";
    public static final String PUBLISHASSERTIONS_CAPABILITY="capability";
    public static final String PUBLISHASSERTIONS="PublishAssertions";
    public static final String QUERY_DOMAIN_UPPER_BOUND="domain_upper_bound";
    public static final String QUERY_QUERYTYPE="queryType";
    public static final String QUERY_QUERYCONTENT="queryContent";
    public static final String QUERY_DOMAIN_LOWER_BOUND="domain_lower_bound";
    public static final String QUERY="Query";
    public static final String ASSERTIONUPDATE_ASSERTIONCONTENT="assertionContent";
    public static final String ASSERTIONUPDATE_ASSERTION="assertion";
    public static final String ASSERTIONUPDATE="AssertionUpdate";
    public static final String CONTEXTDOMAIN_DOMAINDIMENSION="domainDimension";
    public static final String CONTEXTDOMAIN_DOMAINENTITY="domainEntity";
    public static final String CONTEXTDOMAIN_DOMAINVALUE="domainValue";
    public static final String CONTEXTDOMAIN="ContextDomain";
    public static final String ASSERTIONDESCRIPTION_ANNOTATIONTYPE="annotationType";
    public static final String ASSERTIONDESCRIPTION_ASSERTIONTYPE="assertionType";
    public static final String ASSERTIONDESCRIPTION="AssertionDescription";
    public static final String ASSERTIONASSIGNMENT_CAPABILITY="capability";
    public static final String ASSERTIONASSIGNMENT_COORDINATOR="coordinator";
    public static final String ASSERTIONASSIGNMENT="AssertionAssignment";
    public static final String DOMAINDETECTION_DOMAIN="domain";
    public static final String DOMAINDETECTION="DomainDetection";
    public static final String ASSERTIONDISTRIBUTION_ASSIGNMENT="assignment";
    public static final String ASSERTIONDISTRIBUTION="AssertionDistribution";
    public static final String QUERYBASE_QUERYHANDLER="queryHandler";
    public static final String QUERYBASE="QueryBase";

  /**
   * Constructor
  */
  private CMMAgentLangOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema queryBaseSchema = new ConceptSchema(QUERYBASE);
    add(queryBaseSchema, org.aimas.ami.cmm.agent.onto.QueryBase.class);
    ConceptSchema assertionDistributionSchema = new ConceptSchema(ASSERTIONDISTRIBUTION);
    add(assertionDistributionSchema, org.aimas.ami.cmm.agent.onto.AssertionDistribution.class);
    ConceptSchema domainDetectionSchema = new ConceptSchema(DOMAINDETECTION);
    add(domainDetectionSchema, org.aimas.ami.cmm.agent.onto.DomainDetection.class);
    ConceptSchema assertionAssignmentSchema = new ConceptSchema(ASSERTIONASSIGNMENT);
    add(assertionAssignmentSchema, org.aimas.ami.cmm.agent.onto.AssertionAssignment.class);
    ConceptSchema assertionDescriptionSchema = new ConceptSchema(ASSERTIONDESCRIPTION);
    add(assertionDescriptionSchema, org.aimas.ami.cmm.agent.onto.AssertionDescription.class);
    ConceptSchema contextDomainSchema = new ConceptSchema(CONTEXTDOMAIN);
    add(contextDomainSchema, org.aimas.ami.cmm.agent.onto.ContextDomain.class);
    ConceptSchema assertionUpdateSchema = new ConceptSchema(ASSERTIONUPDATE);
    add(assertionUpdateSchema, org.aimas.ami.cmm.agent.onto.AssertionUpdate.class);
    ConceptSchema querySchema = new ConceptSchema(QUERY);
    add(querySchema, org.aimas.ami.cmm.agent.onto.Query.class);

    // adding AgentAction(s)
    AgentActionSchema publishAssertionsSchema = new AgentActionSchema(PUBLISHASSERTIONS);
    add(publishAssertionsSchema, org.aimas.ami.cmm.agent.onto.PublishAssertions.class);
    AgentActionSchema connectToDomainSchema = new AgentActionSchema(CONNECTTODOMAIN);
    add(connectToDomainSchema, org.aimas.ami.cmm.agent.onto.ConnectToDomain.class);
    AgentActionSchema collectQueryBaseSchema = new AgentActionSchema(COLLECTQUERYBASE);
    add(collectQueryBaseSchema, org.aimas.ami.cmm.agent.onto.CollectQueryBase.class);
    AgentActionSchema informAssertionsSchema = new AgentActionSchema(INFORMASSERTIONS);
    add(informAssertionsSchema, org.aimas.ami.cmm.agent.onto.InformAssertions.class);
    AgentActionSchema startSendingSchema = new AgentActionSchema(STARTSENDING);
    add(startSendingSchema, org.aimas.ami.cmm.agent.onto.StartSending.class);
    AgentActionSchema applyConfigurationSchema = new AgentActionSchema(APPLYCONFIGURATION);
    add(applyConfigurationSchema, org.aimas.ami.cmm.agent.onto.ApplyConfiguration.class);
    AgentActionSchema setUpdateModeSchema = new AgentActionSchema(SETUPDATEMODE);
    add(setUpdateModeSchema, org.aimas.ami.cmm.agent.onto.SetUpdateMode.class);
    AgentActionSchema registerUserSchema = new AgentActionSchema(REGISTERUSER);
    add(registerUserSchema, org.aimas.ami.cmm.agent.onto.RegisterUser.class);
    AgentActionSchema execTaskSchema = new AgentActionSchema(EXECTASK);
    add(execTaskSchema, org.aimas.ami.cmm.agent.onto.ExecTask.class);
    AgentActionSchema resolveQueryBaseSchema = new AgentActionSchema(RESOLVEQUERYBASE);
    add(resolveQueryBaseSchema, org.aimas.ami.cmm.agent.onto.ResolveQueryBase.class);
    AgentActionSchema stopSendingSchema = new AgentActionSchema(STOPSENDING);
    add(stopSendingSchema, org.aimas.ami.cmm.agent.onto.StopSending.class);
    AgentActionSchema activateAssertionSchema = new AgentActionSchema(ACTIVATEASSERTION);
    add(activateAssertionSchema, org.aimas.ami.cmm.agent.onto.ActivateAssertion.class);

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema isPresentSchema = new PredicateSchema(ISPRESENT);
    add(isPresentSchema, org.aimas.ami.cmm.agent.onto.IsPresent.class);


    // adding fields
    queryBaseSchema.add(QUERYBASE_QUERYHANDLER, (ConceptSchema)getSchema(BasicOntology.AID), 1, ObjectSchema.UNLIMITED);
    assertionDistributionSchema.add(ASSERTIONDISTRIBUTION_ASSIGNMENT, (TermSchema)getSchema(BasicOntology.STRING), 1, ObjectSchema.UNLIMITED);
    domainDetectionSchema.add(DOMAINDETECTION_DOMAIN, contextDomainSchema, ObjectSchema.MANDATORY);
    assertionAssignmentSchema.add(ASSERTIONASSIGNMENT_COORDINATOR, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    assertionAssignmentSchema.add(ASSERTIONASSIGNMENT_CAPABILITY, assertionDescriptionSchema, 1, ObjectSchema.UNLIMITED);
    assertionDescriptionSchema.add(ASSERTIONDESCRIPTION_ASSERTIONTYPE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    assertionDescriptionSchema.add(ASSERTIONDESCRIPTION_ANNOTATIONTYPE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    contextDomainSchema.add(CONTEXTDOMAIN_DOMAINVALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    contextDomainSchema.add(CONTEXTDOMAIN_DOMAINENTITY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    contextDomainSchema.add(CONTEXTDOMAIN_DOMAINDIMENSION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    assertionUpdateSchema.add(ASSERTIONUPDATE_ASSERTION, assertionDescriptionSchema, ObjectSchema.MANDATORY);
    assertionUpdateSchema.add(ASSERTIONUPDATE_ASSERTIONCONTENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    querySchema.add(QUERY_DOMAIN_LOWER_BOUND, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    querySchema.add(QUERY_QUERYCONTENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    querySchema.add(QUERY_QUERYTYPE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    querySchema.add(QUERY_DOMAIN_UPPER_BOUND, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    publishAssertionsSchema.add(PUBLISHASSERTIONS_CAPABILITY, assertionDescriptionSchema, 1, ObjectSchema.UNLIMITED);
    connectToDomainSchema.add(CONNECTTODOMAIN_DOMAIN, contextDomainSchema, ObjectSchema.MANDATORY);
    applyConfigurationSchema.add(APPLYCONFIGURATION_CONFIGCONTENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    setUpdateModeSchema.add(SETUPDATEMODE_UPDATEMODE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    setUpdateModeSchema.add(SETUPDATEMODE_UPDATERATE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    registerUserSchema.add(REGISTERUSER_USER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    execTaskSchema.add(EXECTASK_ASSERTION, assertionDescriptionSchema, ObjectSchema.MANDATORY);
    resolveQueryBaseSchema.add(RESOLVEQUERYBASE_FORQUERY, querySchema, ObjectSchema.MANDATORY);
    activateAssertionSchema.add(ACTIVATEASSERTION_ASSERTION, assertionDescriptionSchema, ObjectSchema.MANDATORY);
    isPresentSchema.add(ISPRESENT_AGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    startSendingSchema.addSuperSchema(execTaskSchema);
    setUpdateModeSchema.addSuperSchema(execTaskSchema);
    stopSendingSchema.addSuperSchema(execTaskSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
